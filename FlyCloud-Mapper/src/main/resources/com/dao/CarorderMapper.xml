<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dao.CarorderMapper">
    <!-- Carorder的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Carorder_Map" type="com.pojo.Carorder">
        <!-- 当你看到column=类名+数字0123时不要问这是什么鬼,请看文档==>  http://mybatiscmeu.com/  ,中=>修改属性页说明==>表的别名   ;它是MyBatis-CMEU生成多表关联时防止列名超长或者列名重复的策略,可以自义定表的别名,就会以表的别名_表列名命名  -->
        <id column="Carorder0" property="orderId" />
        <result column="Carorder1" property="orderType" />
        <result column="Carorder2" property="companyId" />
        <result column="Carorder3" property="orderTotalPrice" />
        <result column="Carorder4" property="orderNum" />
        <result column="Carorder5" property="carId" />
        <association property="car" javaType="com.pojo.Car">
            <id column="Car0" property="carId" />
            <result column="Car1" property="carPrice" />
            <result column="Car2" property="carName" />
            <result column="Car3" property="carTime" />
            <result column="Car4" property="seriesId" />
        </association>
        <association property="company" javaType="com.pojo.Company">
            <id column="Company0" property="companyId" />
            <result column="Company1" property="companyName" />
        </association>
    </resultMap>

    <!-- Carorder的resultMap,该resultMap是专门用在有多表关联的地方,它保证分页时数据映射不会丢失或者重复 -->
    <resultMap id="result_CarorderOfPaging_Map" type="com.pojo.Carorder">
        <id column="Carorder0" property="orderId" />
        <result column="Carorder1" property="orderType" />
        <result column="Carorder2" property="companyId" />
        <result column="Carorder3" property="orderTotalPrice" />
        <result column="Carorder4" property="orderNum" />
        <result column="Carorder5" property="carId" />
        <association property="car" javaType="com.pojo.Car">
            <id column="Car0" property="carId" />
            <result column="Car1" property="carPrice" />
            <result column="Car2" property="carName" />
            <result column="Car3" property="carTime" />
            <result column="Car4" property="seriesId" />
        </association>
        <association property="company" javaType="com.pojo.Company">
            <id column="Company0" property="companyId" />
            <result column="Company1" property="companyName" />
        </association>
    </resultMap>

    <!-- Car的resultMap,该resultMap是专门用在有多表关联的地方,它保证分页时数据映射不会丢失或者重复 -->
    <resultMap id="result_CarOfPaging_Map" type="com.pojo.Car">
        <id column="Car0" property="carId" />
        <result column="Car1" property="carPrice" />
        <result column="Car2" property="carName" />
        <result column="Car3" property="carTime" />
        <result column="Car4" property="seriesId" />
    </resultMap>

    <!-- Company的resultMap,该resultMap是专门用在有多表关联的地方,它保证分页时数据映射不会丢失或者重复 -->
    <resultMap id="result_CompanyOfPaging_Map" type="com.pojo.Company">
        <id column="Company0" property="companyId" />
        <result column="Company1" property="companyName" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:carorder的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="carorder_Column">
        carorder.orderId as Carorder0
        ,carorder.orderType as Carorder1
        ,carorder.companyId as Carorder2
        ,carorder.orderTotalPrice as Carorder3
        ,carorder.orderNum as Carorder4
        ,carorder.carId as Carorder5
    </sql>

    <!-- 数据库中表名为:car的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="car_Column">
        car.carId as Car0
        ,car.carPrice as Car1
        ,car.carName as Car2
        ,car.carTime as Car3
        ,car.seriesId as Car4
    </sql>

    <!-- 数据库中表名为:company的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="company_Column">
        company.companyId as Company0
        ,company.companyName as Company1
    </sql>

    <!--获得类名为:Carorder对应的数据库表的数据总行数 -->
    <select id="getCarorderRowCount" parameterType="common.Assist" resultType="java.lang.Long">
        select count(orderId) from carorder
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Carorder对应数据库中表的数据集合 -->
    <select id="selectCarorder" parameterType="common.Assist"  resultMap="result_Carorder_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="carorder_Column" /> 
        ,<include refid="car_Column" /> 
        ,<include refid="company_Column" /> 
            </otherwise>
        </choose>
        from carorder
        left join car on car.carId=carorder.carId
        left join company on company.companyId=carorder.companyId
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT orderId as primary_key FROM carorder
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=carorder.orderId
            </otherwise>
        </choose>
    </select> 

    <!-- 获得类名为:Carorder对应数据库中表的数据集合,该查询语句用于多表关联分页查询使用 -->
    <select id="selectCarorderOfPaging" parameterType="common.Assist"  resultMap="result_CarorderOfPaging_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <include refid="carorder_Column" /> 
        from carorder
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT orderId as primary_key FROM carorder
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=carorder.orderId
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Carorder对象,以参数Carorder对象中不为空的属性作为条件进行查询-->
    <select id="selectCarorderByObj" parameterType="com.pojo.Carorder" resultMap="result_Carorder_Map">
        select 
            <include refid="carorder_Column" /> 
            ,<include refid="car_Column" /> 
            ,<include refid="company_Column" /> 
        from carorder
        left join car on car.carId=carorder.carId
        left join company on company.companyId=carorder.companyId
        <where>
            <if test="carId != null "> and carorder.carId = #{carId}</if>
            <if test="orderNum != null "> and carorder.orderNum = #{orderNum}</if>
            <if test="orderTotalPrice != null "> and carorder.orderTotalPrice = #{orderTotalPrice}</if>
            <if test="companyId != null "> and carorder.companyId = #{companyId}</if>
            <if test="orderType != null "> and carorder.orderType = #{orderType}</if>
            <if test="orderId != null "> and carorder.orderId = #{orderId}</if>
        </where>
    </select> 

    <!-- 通过Carorder的id获得对应数据库中表的数据对象-->
    <select id="selectCarorderById" parameterType="java.lang.Integer" resultMap="result_Carorder_Map">
        select 
            <include refid="carorder_Column" /> 
            ,<include refid="car_Column" /> 
            ,<include refid="company_Column" /> 
        from carorder
        left join car on car.carId=carorder.carId
        left join company on company.companyId=carorder.companyId
        where carorder.orderId = #{id}
    </select> 

    <!-- 将Carorder插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertCarorder" parameterType="com.pojo.Carorder">
        insert into carorder(orderId,orderType,companyId,orderTotalPrice,orderNum,carId) 
        values(#{orderId},#{orderType},#{companyId},#{orderTotalPrice},#{orderNum},#{carId})
    </insert>

    <!-- 将Carorder中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyCarorder" parameterType="com.pojo.Carorder">
        insert into carorder
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="orderId != null">orderId,</if>
            <if test="orderType != null">orderType,</if>
            <if test="companyId != null">companyId,</if>
            <if test="orderTotalPrice != null">orderTotalPrice,</if>
            <if test="orderNum != null">orderNum,</if>
            <if test="carId != null">carId,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="orderId != null"> #{orderId},</if>
            <if test="orderType != null"> #{orderType},</if>
            <if test="companyId != null"> #{companyId},</if>
            <if test="orderTotalPrice != null"> #{orderTotalPrice},</if>
            <if test="orderNum != null"> #{orderNum},</if>
            <if test="carId != null"> #{carId},</if>
        </trim>
    </insert>

    <!-- 将Carorder批量插入到对应数据库的表中-->
    <insert id="insertCarorderByBatch" parameterType="ArrayList">
        insert into carorder(orderId,orderType,companyId,orderTotalPrice,orderNum,carId) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.orderId},#{item.orderType},#{item.companyId},#{item.orderTotalPrice},#{item.orderNum},#{item.carId})
        </foreach>
    </insert>

    <!-- 通过Carorder的id将数据库表中对应的数据删除-->
    <delete id="deleteCarorderById" parameterType="java.lang.Integer">
        delete from carorder
        where orderId = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Carorder对应的数据库表的数据删除-->
    <delete id="deleteCarorder" parameterType="common.Assist">
        delete from carorder
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Carorder的id将Carorder的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateCarorderById" parameterType="com.pojo.Carorder">
        update carorder set
            orderType=#{orderType}
            ,companyId=#{companyId}
            ,orderTotalPrice=#{orderTotalPrice}
            ,orderNum=#{orderNum}
            ,carId=#{carId}
        where orderId=#{orderId}
    </update>

    <!-- 通过Carorder的id将Carorder中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyCarorderById" parameterType="com.pojo.Carorder">
        update carorder
        <set>
            <if test="orderType != null">
                orderType=#{orderType},
            </if>
            <if test="companyId != null">
                companyId=#{companyId},
            </if>
            <if test="orderTotalPrice != null">
                orderTotalPrice=#{orderTotalPrice},
            </if>
            <if test="orderNum != null">
                orderNum=#{orderNum},
            </if>
            <if test="carId != null">
                carId=#{carId},
            </if>
        </set>
        where orderId=#{orderId}
    </update>

    <!-- 通过辅助工具Assist中的条件将Carorder中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateCarorder" parameterType="map">
        update carorder
        <set>
                orderId=#{enti.orderId},
                orderType=#{enti.orderType},
                companyId=#{enti.companyId},
                orderTotalPrice=#{enti.orderTotalPrice},
                orderNum=#{enti.orderNum},
                carId=#{enti.carId},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Carorder中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyCarorder" parameterType="map">
        update carorder
        <set>
            <if test="enti.orderId != null">
                orderId=#{enti.orderId},
            </if>
            <if test="enti.orderType != null">
                orderType=#{enti.orderType},
            </if>
            <if test="enti.companyId != null">
                companyId=#{enti.companyId},
            </if>
            <if test="enti.orderTotalPrice != null">
                orderTotalPrice=#{enti.orderTotalPrice},
            </if>
            <if test="enti.orderNum != null">
                orderNum=#{enti.orderNum},
            </if>
            <if test="enti.carId != null">
                carId=#{enti.carId},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>