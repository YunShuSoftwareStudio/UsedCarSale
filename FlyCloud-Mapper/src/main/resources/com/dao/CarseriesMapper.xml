<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dao.CarseriesMapper">
    <!-- Carseries的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Carseries_Map" type="com.pojo.Carseries">
        <!-- 当你看到column=类名+数字0123时不要问这是什么鬼,请看文档==>  http://mybatiscmeu.com/  ,中=>修改属性页说明==>表的别名   ;它是MyBatis-CMEU生成多表关联时防止列名超长或者列名重复的策略,可以自义定表的别名,就会以表的别名_表列名命名  -->
        <id column="Carseries0" property="seriesId" />
        <result column="Carseries1" property="seriesName" />
        <result column="Carseries2" property="brandId" />
        <association property="carbrand" javaType="com.pojo.Carbrand">
            <id column="Carbrand0" property="brandId" />
            <result column="Carbrand1" property="brandName" />
            <result column="Carbrand2" property="brandNum" />
        </association>
    </resultMap>

    <!-- Carseries的resultMap,该resultMap是专门用在有多表关联的地方,它保证分页时数据映射不会丢失或者重复 -->
    <resultMap id="result_CarseriesOfPaging_Map" type="com.pojo.Carseries">
        <id column="Carseries0" property="seriesId" />
        <result column="Carseries1" property="seriesName" />
        <result column="Carseries2" property="brandId" />
        <association property="carbrand" javaType="com.pojo.Carbrand">
            <id column="Carbrand0" property="brandId" />
            <result column="Carbrand1" property="brandName" />
            <result column="Carbrand2" property="brandNum" />
        </association>
    </resultMap>

    <!-- Carbrand的resultMap,该resultMap是专门用在有多表关联的地方,它保证分页时数据映射不会丢失或者重复 -->
    <resultMap id="result_CarbrandOfPaging_Map" type="com.pojo.Carbrand">
        <id column="Carbrand0" property="brandId" />
        <result column="Carbrand1" property="brandName" />
        <result column="Carbrand2" property="brandNum" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:carseries的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="carseries_Column">
        carseries.seriesId as Carseries0
        ,carseries.seriesName as Carseries1
        ,carseries.brandId as Carseries2
    </sql>

    <!-- 数据库中表名为:carbrand的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="carbrand_Column">
        carbrand.brandId as Carbrand0
        ,carbrand.brandName as Carbrand1
        ,carbrand.brandNum as Carbrand2
    </sql>

    <!--获得类名为:Carseries对应的数据库表的数据总行数 -->
    <select id="getCarseriesRowCount" parameterType="common.Assist" resultType="java.lang.Long">
        select count(seriesId) from carseries
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Carseries对应数据库中表的数据集合 -->
    <select id="selectCarseries" parameterType="common.Assist"  resultMap="result_Carseries_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="carseries_Column" /> 
        ,<include refid="carbrand_Column" /> 
            </otherwise>
        </choose>
        from carseries
        left join carbrand on carbrand.brandId=carseries.brandId
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT seriesId as primary_key FROM carseries
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=carseries.seriesId
            </otherwise>
        </choose>
    </select> 

    <!-- 获得类名为:Carseries对应数据库中表的数据集合,该查询语句用于多表关联分页查询使用 -->
    <select id="selectCarseriesOfPaging" parameterType="common.Assist"  resultMap="result_CarseriesOfPaging_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <include refid="carseries_Column" /> 
        from carseries
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT seriesId as primary_key FROM carseries
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=carseries.seriesId
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Carseries对象,以参数Carseries对象中不为空的属性作为条件进行查询-->
    <select id="selectCarseriesByObj" parameterType="com.pojo.Carseries" resultMap="result_Carseries_Map">
        select 
            <include refid="carseries_Column" /> 
            ,<include refid="carbrand_Column" /> 
        from carseries
        left join carbrand on carbrand.brandId=carseries.brandId
        <where>
            <if test="brandId != null "> and carseries.brandId = #{brandId}</if>
            <if test="seriesName != null "> and carseries.seriesName = #{seriesName}</if>
            <if test="seriesId != null "> and carseries.seriesId = #{seriesId}</if>
        </where>
    </select> 

    <!-- 通过Carseries的id获得对应数据库中表的数据对象-->
    <select id="selectCarseriesById" parameterType="java.lang.Integer" resultMap="result_Carseries_Map">
        select 
            <include refid="carseries_Column" /> 
            ,<include refid="carbrand_Column" /> 
        from carseries
        left join carbrand on carbrand.brandId=carseries.brandId
        where carseries.seriesId = #{id}
    </select> 

    <!-- 将Carseries插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertCarseries" parameterType="com.pojo.Carseries">
        insert into carseries(seriesId,seriesName,brandId) 
        values(#{seriesId},#{seriesName},#{brandId})
    </insert>

    <!-- 将Carseries中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyCarseries" parameterType="com.pojo.Carseries">
        insert into carseries
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="seriesId != null">seriesId,</if>
            <if test="seriesName != null">seriesName,</if>
            <if test="brandId != null">brandId,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="seriesId != null"> #{seriesId},</if>
            <if test="seriesName != null"> #{seriesName},</if>
            <if test="brandId != null"> #{brandId},</if>
        </trim>
    </insert>

    <!-- 将Carseries批量插入到对应数据库的表中-->
    <insert id="insertCarseriesByBatch" parameterType="ArrayList">
        insert into carseries(seriesId,seriesName,brandId) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.seriesId},#{item.seriesName},#{item.brandId})
        </foreach>
    </insert>

    <!-- 通过Carseries的id将数据库表中对应的数据删除-->
    <delete id="deleteCarseriesById" parameterType="java.lang.Integer">
        delete from carseries
        where seriesId = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Carseries对应的数据库表的数据删除-->
    <delete id="deleteCarseries" parameterType="common.Assist">
        delete from carseries
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Carseries的id将Carseries的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateCarseriesById" parameterType="com.pojo.Carseries">
        update carseries set
            seriesName=#{seriesName}
            ,brandId=#{brandId}
        where seriesId=#{seriesId}
    </update>

    <!-- 通过Carseries的id将Carseries中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyCarseriesById" parameterType="com.pojo.Carseries">
        update carseries
        <set>
            <if test="seriesName != null">
                seriesName=#{seriesName},
            </if>
            <if test="brandId != null">
                brandId=#{brandId},
            </if>
        </set>
        where seriesId=#{seriesId}
    </update>

    <!-- 通过辅助工具Assist中的条件将Carseries中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateCarseries" parameterType="map">
        update carseries
        <set>
                seriesId=#{enti.seriesId},
                seriesName=#{enti.seriesName},
                brandId=#{enti.brandId},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Carseries中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyCarseries" parameterType="map">
        update carseries
        <set>
            <if test="enti.seriesId != null">
                seriesId=#{enti.seriesId},
            </if>
            <if test="enti.seriesName != null">
                seriesName=#{enti.seriesName},
            </if>
            <if test="enti.brandId != null">
                brandId=#{enti.brandId},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>