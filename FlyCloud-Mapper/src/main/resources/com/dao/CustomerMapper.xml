<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dao.CustomerMapper">
    <!-- Customer的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Customer_Map" type="com.pojo.Customer">
        <!-- 当你看到column=类名+数字0123时不要问这是什么鬼,请看文档==>  http://mybatiscmeu.com/  ,中=>修改属性页说明==>表的别名   ;它是MyBatis-CMEU生成多表关联时防止列名超长或者列名重复的策略,可以自义定表的别名,就会以表的别名_表列名命名  -->
        <id column="Customer0" property="customerId" />
        <result column="Customer1" property="companyId" />
        <result column="Customer2" property="customerPhone" />
        <result column="Customer3" property="customerType" />
        <result column="Customer4" property="customerCreateTime" />
        <result column="Customer5" property="customerSex" />
        <result column="Customer6" property="customerBirthday" />
        <result column="Customer7" property="customerName" />
        <association property="company" javaType="com.pojo.Company">
            <id column="Company0" property="companyId" />
            <result column="Company1" property="companyName" />
        </association>
    </resultMap>

    <!-- Customer的resultMap,该resultMap是专门用在有多表关联的地方,它保证分页时数据映射不会丢失或者重复 -->
    <resultMap id="result_CustomerOfPaging_Map" type="com.pojo.Customer">
        <id column="Customer0" property="customerId" />
        <result column="Customer1" property="companyId" />
        <result column="Customer2" property="customerPhone" />
        <result column="Customer3" property="customerType" />
        <result column="Customer4" property="customerCreateTime" />
        <result column="Customer5" property="customerSex" />
        <result column="Customer6" property="customerBirthday" />
        <result column="Customer7" property="customerName" />
        <association property="company" javaType="com.pojo.Company">
            <id column="Company0" property="companyId" />
            <result column="Company1" property="companyName" />
        </association>
    </resultMap>

    <!-- Company的resultMap,该resultMap是专门用在有多表关联的地方,它保证分页时数据映射不会丢失或者重复 -->
    <resultMap id="result_CompanyOfPaging_Map" type="com.pojo.Company">
        <id column="Company0" property="companyId" />
        <result column="Company1" property="companyName" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:customer的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="customer_Column">
        customer.customerId as Customer0
        ,customer.companyId as Customer1
        ,customer.customerPhone as Customer2
        ,customer.customerType as Customer3
        ,customer.customerCreateTime as Customer4
        ,customer.customerSex as Customer5
        ,customer.customerBirthday as Customer6
        ,customer.customerName as Customer7
    </sql>

    <!-- 数据库中表名为:company的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="company_Column">
        company.companyId as Company0
        ,company.companyName as Company1
    </sql>

    <!--获得类名为:Customer对应的数据库表的数据总行数 -->
    <select id="getCustomerRowCount" parameterType="common.Assist" resultType="java.lang.Long">
        select count(customerId) from customer
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Customer对应数据库中表的数据集合 -->
    <select id="selectCustomer" parameterType="common.Assist"  resultMap="result_Customer_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="customer_Column" /> 
        ,<include refid="company_Column" /> 
            </otherwise>
        </choose>
        from customer
        left join company on company.companyId=customer.companyId
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT customerId as primary_key FROM customer
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=customer.customerId
            </otherwise>
        </choose>
    </select> 

    <!-- 获得类名为:Customer对应数据库中表的数据集合,该查询语句用于多表关联分页查询使用 -->
    <select id="selectCustomerOfPaging" parameterType="common.Assist"  resultMap="result_CustomerOfPaging_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <include refid="customer_Column" /> 
        from customer
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT customerId as primary_key FROM customer
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=customer.customerId
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Customer对象,以参数Customer对象中不为空的属性作为条件进行查询-->
    <select id="selectCustomerByObj" parameterType="com.pojo.Customer" resultMap="result_Customer_Map">
        select 
            <include refid="customer_Column" /> 
            ,<include refid="company_Column" /> 
        from customer
        left join company on company.companyId=customer.companyId
        <where>
            <if test="customerName != null "> and customer.customerName = #{customerName}</if>
            <if test="customerBirthday != null "> and customer.customerBirthday = #{customerBirthday}</if>
            <if test="customerSex != null "> and customer.customerSex = #{customerSex}</if>
            <if test="customerCreateTime != null "> and customer.customerCreateTime = #{customerCreateTime}</if>
            <if test="customerType != null "> and customer.customerType = #{customerType}</if>
            <if test="customerPhone != null "> and customer.customerPhone = #{customerPhone}</if>
            <if test="companyId != null "> and customer.companyId = #{companyId}</if>
            <if test="customerId != null "> and customer.customerId = #{customerId}</if>
        </where>
    </select> 

    <!-- 通过Customer的id获得对应数据库中表的数据对象-->
    <select id="selectCustomerById" parameterType="java.lang.Integer" resultMap="result_Customer_Map">
        select 
            <include refid="customer_Column" /> 
            ,<include refid="company_Column" /> 
        from customer
        left join company on company.companyId=customer.companyId
        where customer.customerId = #{id}
    </select> 

    <!-- 将Customer插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertCustomer" parameterType="com.pojo.Customer">
        insert into customer(customerId,companyId,customerPhone,customerType,customerCreateTime,customerSex,customerBirthday,customerName) 
        values(#{customerId},#{companyId},#{customerPhone},#{customerType},#{customerCreateTime},#{customerSex},#{customerBirthday},#{customerName})
    </insert>

    <!-- 将Customer中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyCustomer" parameterType="com.pojo.Customer">
        insert into customer
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="customerId != null">customerId,</if>
            <if test="companyId != null">companyId,</if>
            <if test="customerPhone != null">customerPhone,</if>
            <if test="customerType != null">customerType,</if>
            <if test="customerCreateTime != null">customerCreateTime,</if>
            <if test="customerSex != null">customerSex,</if>
            <if test="customerBirthday != null">customerBirthday,</if>
            <if test="customerName != null">customerName,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="customerId != null"> #{customerId},</if>
            <if test="companyId != null"> #{companyId},</if>
            <if test="customerPhone != null"> #{customerPhone},</if>
            <if test="customerType != null"> #{customerType},</if>
            <if test="customerCreateTime != null"> #{customerCreateTime},</if>
            <if test="customerSex != null"> #{customerSex},</if>
            <if test="customerBirthday != null"> #{customerBirthday},</if>
            <if test="customerName != null"> #{customerName},</if>
        </trim>
    </insert>

    <!-- 将Customer批量插入到对应数据库的表中-->
    <insert id="insertCustomerByBatch" parameterType="ArrayList">
        insert into customer(customerId,companyId,customerPhone,customerType,customerCreateTime,customerSex,customerBirthday,customerName) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.customerId},#{item.companyId},#{item.customerPhone},#{item.customerType},#{item.customerCreateTime},#{item.customerSex},#{item.customerBirthday},#{item.customerName})
        </foreach>
    </insert>

    <!-- 通过Customer的id将数据库表中对应的数据删除-->
    <delete id="deleteCustomerById" parameterType="java.lang.Integer">
        delete from customer
        where customerId = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Customer对应的数据库表的数据删除-->
    <delete id="deleteCustomer" parameterType="common.Assist">
        delete from customer
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Customer的id将Customer的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateCustomerById" parameterType="com.pojo.Customer">
        update customer set
            companyId=#{companyId}
            ,customerPhone=#{customerPhone}
            ,customerType=#{customerType}
            ,customerCreateTime=#{customerCreateTime}
            ,customerSex=#{customerSex}
            ,customerBirthday=#{customerBirthday}
            ,customerName=#{customerName}
        where customerId=#{customerId}
    </update>

    <!-- 通过Customer的id将Customer中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyCustomerById" parameterType="com.pojo.Customer">
        update customer
        <set>
            <if test="companyId != null">
                companyId=#{companyId},
            </if>
            <if test="customerPhone != null">
                customerPhone=#{customerPhone},
            </if>
            <if test="customerType != null">
                customerType=#{customerType},
            </if>
            <if test="customerCreateTime != null">
                customerCreateTime=#{customerCreateTime},
            </if>
            <if test="customerSex != null">
                customerSex=#{customerSex},
            </if>
            <if test="customerBirthday != null">
                customerBirthday=#{customerBirthday},
            </if>
            <if test="customerName != null">
                customerName=#{customerName},
            </if>
        </set>
        where customerId=#{customerId}
    </update>

    <!-- 通过辅助工具Assist中的条件将Customer中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateCustomer" parameterType="map">
        update customer
        <set>
                customerId=#{enti.customerId},
                companyId=#{enti.companyId},
                customerPhone=#{enti.customerPhone},
                customerType=#{enti.customerType},
                customerCreateTime=#{enti.customerCreateTime},
                customerSex=#{enti.customerSex},
                customerBirthday=#{enti.customerBirthday},
                customerName=#{enti.customerName},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Customer中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyCustomer" parameterType="map">
        update customer
        <set>
            <if test="enti.customerId != null">
                customerId=#{enti.customerId},
            </if>
            <if test="enti.companyId != null">
                companyId=#{enti.companyId},
            </if>
            <if test="enti.customerPhone != null">
                customerPhone=#{enti.customerPhone},
            </if>
            <if test="enti.customerType != null">
                customerType=#{enti.customerType},
            </if>
            <if test="enti.customerCreateTime != null">
                customerCreateTime=#{enti.customerCreateTime},
            </if>
            <if test="enti.customerSex != null">
                customerSex=#{enti.customerSex},
            </if>
            <if test="enti.customerBirthday != null">
                customerBirthday=#{enti.customerBirthday},
            </if>
            <if test="enti.customerName != null">
                customerName=#{enti.customerName},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>