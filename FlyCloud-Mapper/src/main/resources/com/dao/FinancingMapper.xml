<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dao.FinancingMapper">
    <!-- Financing的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Financing_Map" type="com.pojo.Financing">
        <!-- 当你看到column=类名+数字0123时不要问这是什么鬼,请看文档==>  http://mybatiscmeu.com/  ,中=>修改属性页说明==>表的别名   ;它是MyBatis-CMEU生成多表关联时防止列名超长或者列名重复的策略,可以自义定表的别名,就会以表的别名_表列名命名  -->
        <id column="Financing0" property="financingId" />
        <result column="Financing1" property="companyId" />
        <result column="Financing2" property="financingMoney" />
        <result column="Financing3" property="saleId" />
        <result column="Financing4" property="repertoryId" />
        <result column="Financing5" property="financingTime" />
        <result column="Financing6" property="financingType" />
        <association property="company" javaType="com.pojo.Company">
            <id column="Company0" property="companyId" />
            <result column="Company1" property="companyName" />
        </association>
        <association property="sale" javaType="com.pojo.Sale">
            <id column="Sale0" property="saleId" />
            <result column="Sale1" property="empId" />
            <result column="Sale2" property="companyId" />
            <result column="Sale3" property="saleTime" />
            <result column="Sale4" property="saleType" />
            <result column="Sale5" property="customerId" />
            <result column="Sale6" property="saleTotalPrice" />
            <result column="Sale7" property="saleNum" />
            <result column="Sale8" property="saleCurPrice" />
            <result column="Sale9" property="carId" />
        </association>
        <association property="repertory" javaType="com.pojo.Repertory">
            <id column="Repertory0" property="repertoryId" />
            <result column="Repertory1" property="inTime" />
            <result column="Repertory2" property="companyId" />
            <result column="Repertory3" property="repertoryNum" />
            <result column="Repertory4" property="purchasePrice" />
            <result column="Repertory5" property="carId" />
        </association>
    </resultMap>

    <!-- Financing的resultMap,该resultMap是专门用在有多表关联的地方,它保证分页时数据映射不会丢失或者重复 -->
    <resultMap id="result_FinancingOfPaging_Map" type="com.pojo.Financing">
        <id column="Financing0" property="financingId" />
        <result column="Financing1" property="companyId" />
        <result column="Financing2" property="financingMoney" />
        <result column="Financing3" property="saleId" />
        <result column="Financing4" property="repertoryId" />
        <result column="Financing5" property="financingTime" />
        <result column="Financing6" property="financingType" />
        <association property="company" javaType="com.pojo.Company">
            <id column="Company0" property="companyId" />
            <result column="Company1" property="companyName" />
        </association>
        <association property="sale" javaType="com.pojo.Sale">
            <id column="Sale0" property="saleId" />
            <result column="Sale1" property="empId" />
            <result column="Sale2" property="companyId" />
            <result column="Sale3" property="saleTime" />
            <result column="Sale4" property="saleType" />
            <result column="Sale5" property="customerId" />
            <result column="Sale6" property="saleTotalPrice" />
            <result column="Sale7" property="saleNum" />
            <result column="Sale8" property="saleCurPrice" />
            <result column="Sale9" property="carId" />
        </association>
        <association property="repertory" javaType="com.pojo.Repertory">
            <id column="Repertory0" property="repertoryId" />
            <result column="Repertory1" property="inTime" />
            <result column="Repertory2" property="companyId" />
            <result column="Repertory3" property="repertoryNum" />
            <result column="Repertory4" property="purchasePrice" />
            <result column="Repertory5" property="carId" />
        </association>
    </resultMap>

    <!-- Company的resultMap,该resultMap是专门用在有多表关联的地方,它保证分页时数据映射不会丢失或者重复 -->
    <resultMap id="result_CompanyOfPaging_Map" type="com.pojo.Company">
        <id column="Company0" property="companyId" />
        <result column="Company1" property="companyName" />
    </resultMap>

    <!-- Sale的resultMap,该resultMap是专门用在有多表关联的地方,它保证分页时数据映射不会丢失或者重复 -->
    <resultMap id="result_SaleOfPaging_Map" type="com.pojo.Sale">
        <id column="Sale0" property="saleId" />
        <result column="Sale1" property="empId" />
        <result column="Sale2" property="companyId" />
        <result column="Sale3" property="saleTime" />
        <result column="Sale4" property="saleType" />
        <result column="Sale5" property="customerId" />
        <result column="Sale6" property="saleTotalPrice" />
        <result column="Sale7" property="saleNum" />
        <result column="Sale8" property="saleCurPrice" />
        <result column="Sale9" property="carId" />
    </resultMap>

    <!-- Repertory的resultMap,该resultMap是专门用在有多表关联的地方,它保证分页时数据映射不会丢失或者重复 -->
    <resultMap id="result_RepertoryOfPaging_Map" type="com.pojo.Repertory">
        <id column="Repertory0" property="repertoryId" />
        <result column="Repertory1" property="inTime" />
        <result column="Repertory2" property="companyId" />
        <result column="Repertory3" property="repertoryNum" />
        <result column="Repertory4" property="purchasePrice" />
        <result column="Repertory5" property="carId" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:financing的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="financing_Column">
        financing.financingId as Financing0
        ,financing.companyId as Financing1
        ,financing.financingMoney as Financing2
        ,financing.saleId as Financing3
        ,financing.repertoryId as Financing4
        ,financing.financingTime as Financing5
        ,financing.financingType as Financing6
    </sql>

    <!-- 数据库中表名为:company的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="company_Column">
        company.companyId as Company0
        ,company.companyName as Company1
    </sql>

    <!-- 数据库中表名为:sale的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="sale_Column">
        sale.saleId as Sale0
        ,sale.empId as Sale1
        ,sale.companyId as Sale2
        ,sale.saleTime as Sale3
        ,sale.saleType as Sale4
        ,sale.customerId as Sale5
        ,sale.saleTotalPrice as Sale6
        ,sale.saleNum as Sale7
        ,sale.saleCurPrice as Sale8
        ,sale.carId as Sale9
    </sql>

    <!-- 数据库中表名为:repertory的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="repertory_Column">
        repertory.repertoryId as Repertory0
        ,repertory.inTime as Repertory1
        ,repertory.companyId as Repertory2
        ,repertory.repertoryNum as Repertory3
        ,repertory.purchasePrice as Repertory4
        ,repertory.carId as Repertory5
    </sql>

    <!--获得类名为:Financing对应的数据库表的数据总行数 -->
    <select id="getFinancingRowCount" parameterType="common.Assist" resultType="java.lang.Long">
        select count(financingId) from financing
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Financing对应数据库中表的数据集合 -->
    <select id="selectFinancing" parameterType="common.Assist"  resultMap="result_Financing_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="financing_Column" /> 
        ,<include refid="company_Column" /> 
        ,<include refid="sale_Column" /> 
        ,<include refid="repertory_Column" /> 
            </otherwise>
        </choose>
        from financing
        left join company on company.companyId=financing.companyId
        left join sale on sale.saleId=financing.saleId
        left join repertory on repertory.repertoryId=financing.repertoryId
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT financingId as primary_key FROM financing
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=financing.financingId
            </otherwise>
        </choose>
    </select> 

    <!-- 获得类名为:Financing对应数据库中表的数据集合,该查询语句用于多表关联分页查询使用 -->
    <select id="selectFinancingOfPaging" parameterType="common.Assist"  resultMap="result_FinancingOfPaging_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <include refid="financing_Column" /> 
        from financing
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT financingId as primary_key FROM financing
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=financing.financingId
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Financing对象,以参数Financing对象中不为空的属性作为条件进行查询-->
    <select id="selectFinancingByObj" parameterType="com.pojo.Financing" resultMap="result_Financing_Map">
        select 
            <include refid="financing_Column" /> 
            ,<include refid="company_Column" /> 
            ,<include refid="sale_Column" /> 
            ,<include refid="repertory_Column" /> 
        from financing
        left join company on company.companyId=financing.companyId
        left join sale on sale.saleId=financing.saleId
        left join repertory on repertory.repertoryId=financing.repertoryId
        <where>
            <if test="financingType != null "> and financing.financingType = #{financingType}</if>
            <if test="financingTime != null "> and financing.financingTime = #{financingTime}</if>
            <if test="repertoryId != null "> and financing.repertoryId = #{repertoryId}</if>
            <if test="saleId != null "> and financing.saleId = #{saleId}</if>
            <if test="financingMoney != null "> and financing.financingMoney = #{financingMoney}</if>
            <if test="companyId != null "> and financing.companyId = #{companyId}</if>
            <if test="financingId != null "> and financing.financingId = #{financingId}</if>
        </where>
    </select> 

    <!-- 通过Financing的id获得对应数据库中表的数据对象-->
    <select id="selectFinancingById" parameterType="java.lang.Integer" resultMap="result_Financing_Map">
        select 
            <include refid="financing_Column" /> 
            ,<include refid="company_Column" /> 
            ,<include refid="sale_Column" /> 
            ,<include refid="repertory_Column" /> 
        from financing
        left join company on company.companyId=financing.companyId
        left join sale on sale.saleId=financing.saleId
        left join repertory on repertory.repertoryId=financing.repertoryId
        where financing.financingId = #{id}
    </select> 

    <!-- 将Financing插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertFinancing" parameterType="com.pojo.Financing">
        insert into financing(financingId,companyId,financingMoney,saleId,repertoryId,financingTime,financingType) 
        values(#{financingId},#{companyId},#{financingMoney},#{saleId},#{repertoryId},#{financingTime},#{financingType})
    </insert>

    <!-- 将Financing中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyFinancing" parameterType="com.pojo.Financing">
        insert into financing
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="financingId != null">financingId,</if>
            <if test="companyId != null">companyId,</if>
            <if test="financingMoney != null">financingMoney,</if>
            <if test="saleId != null">saleId,</if>
            <if test="repertoryId != null">repertoryId,</if>
            <if test="financingTime != null">financingTime,</if>
            <if test="financingType != null">financingType,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="financingId != null"> #{financingId},</if>
            <if test="companyId != null"> #{companyId},</if>
            <if test="financingMoney != null"> #{financingMoney},</if>
            <if test="saleId != null"> #{saleId},</if>
            <if test="repertoryId != null"> #{repertoryId},</if>
            <if test="financingTime != null"> #{financingTime},</if>
            <if test="financingType != null"> #{financingType},</if>
        </trim>
    </insert>

    <!-- 将Financing批量插入到对应数据库的表中-->
    <insert id="insertFinancingByBatch" parameterType="ArrayList">
        insert into financing(financingId,companyId,financingMoney,saleId,repertoryId,financingTime,financingType) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.financingId},#{item.companyId},#{item.financingMoney},#{item.saleId},#{item.repertoryId},#{item.financingTime},#{item.financingType})
        </foreach>
    </insert>

    <!-- 通过Financing的id将数据库表中对应的数据删除-->
    <delete id="deleteFinancingById" parameterType="java.lang.Integer">
        delete from financing
        where financingId = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Financing对应的数据库表的数据删除-->
    <delete id="deleteFinancing" parameterType="common.Assist">
        delete from financing
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Financing的id将Financing的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateFinancingById" parameterType="com.pojo.Financing">
        update financing set
            companyId=#{companyId}
            ,financingMoney=#{financingMoney}
            ,saleId=#{saleId}
            ,repertoryId=#{repertoryId}
            ,financingTime=#{financingTime}
            ,financingType=#{financingType}
        where financingId=#{financingId}
    </update>

    <!-- 通过Financing的id将Financing中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyFinancingById" parameterType="com.pojo.Financing">
        update financing
        <set>
            <if test="companyId != null">
                companyId=#{companyId},
            </if>
            <if test="financingMoney != null">
                financingMoney=#{financingMoney},
            </if>
            <if test="saleId != null">
                saleId=#{saleId},
            </if>
            <if test="repertoryId != null">
                repertoryId=#{repertoryId},
            </if>
            <if test="financingTime != null">
                financingTime=#{financingTime},
            </if>
            <if test="financingType != null">
                financingType=#{financingType},
            </if>
        </set>
        where financingId=#{financingId}
    </update>

    <!-- 通过辅助工具Assist中的条件将Financing中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateFinancing" parameterType="map">
        update financing
        <set>
                financingId=#{enti.financingId},
                companyId=#{enti.companyId},
                financingMoney=#{enti.financingMoney},
                saleId=#{enti.saleId},
                repertoryId=#{enti.repertoryId},
                financingTime=#{enti.financingTime},
                financingType=#{enti.financingType},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Financing中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyFinancing" parameterType="map">
        update financing
        <set>
            <if test="enti.financingId != null">
                financingId=#{enti.financingId},
            </if>
            <if test="enti.companyId != null">
                companyId=#{enti.companyId},
            </if>
            <if test="enti.financingMoney != null">
                financingMoney=#{enti.financingMoney},
            </if>
            <if test="enti.saleId != null">
                saleId=#{enti.saleId},
            </if>
            <if test="enti.repertoryId != null">
                repertoryId=#{enti.repertoryId},
            </if>
            <if test="enti.financingTime != null">
                financingTime=#{enti.financingTime},
            </if>
            <if test="enti.financingType != null">
                financingType=#{enti.financingType},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>