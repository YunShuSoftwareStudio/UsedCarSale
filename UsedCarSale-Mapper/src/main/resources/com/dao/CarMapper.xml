<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dao.CarMapper">
    <!-- Car的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Car_Map" type="com.pojo.Car">
        <!-- 当你看到column=类名+数字0123时不要问这是什么鬼,请看文档==>  http://mybatiscmeu.com/  ,中=>修改属性页说明==>表的别名   ;它是MyBatis-CMEU生成多表关联时防止列名超长或者列名重复的策略,可以自义定表的别名,就会以表的别名_表列名命名  -->
        <id column="Car0" property="carId" />
        <result column="Car1" property="carPrice" />
        <result column="Car2" property="carName" />
        <result column="Car3" property="carTime" />
        <result column="Car4" property="seriesId" />
        <association property="carseries" javaType="com.pojo.Carseries">
            <id column="Carseries0" property="seriesId" />
            <result column="Carseries1" property="seriesName" />
            <result column="Carseries2" property="brandId" />
        </association>
    </resultMap>

    <!-- Car的resultMap,该resultMap是专门用在有多表关联的地方,它保证分页时数据映射不会丢失或者重复 -->
    <resultMap id="result_CarOfPaging_Map" type="com.pojo.Car">
        <id column="Car0" property="carId" />
        <result column="Car1" property="carPrice" />
        <result column="Car2" property="carName" />
        <result column="Car3" property="carTime" />
        <result column="Car4" property="seriesId" />
        <association property="carseries" javaType="com.pojo.Carseries">
            <id column="Carseries0" property="seriesId" />
            <result column="Carseries1" property="seriesName" />
            <result column="Carseries2" property="brandId" />
        </association>
    </resultMap>

    <!-- Carseries的resultMap,该resultMap是专门用在有多表关联的地方,它保证分页时数据映射不会丢失或者重复 -->
    <resultMap id="result_CarseriesOfPaging_Map" type="com.pojo.Carseries">
        <id column="Carseries0" property="seriesId" />
        <result column="Carseries1" property="seriesName" />
        <result column="Carseries2" property="brandId" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:car的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="car_Column">
        car.carId as Car0
        ,car.carPrice as Car1
        ,car.carName as Car2
        ,car.carTime as Car3
        ,car.seriesId as Car4
    </sql>

    <!-- 数据库中表名为:carseries的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="carseries_Column">
        carseries.seriesId as Carseries0
        ,carseries.seriesName as Carseries1
        ,carseries.brandId as Carseries2
    </sql>

    <!--获得类名为:Car对应的数据库表的数据总行数 -->
    <select id="getCarRowCount" parameterType="common.Assist" resultType="java.lang.Long">
        select count(carId) from car
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Car对应数据库中表的数据集合 -->
    <select id="selectCar" parameterType="common.Assist"  resultMap="result_Car_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="car_Column" /> 
        ,<include refid="carseries_Column" /> 
            </otherwise>
        </choose>
        from car
        left join carseries on carseries.seriesId=car.seriesId
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT carId as primary_key FROM car
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=car.carId
            </otherwise>
        </choose>
    </select> 

    <!-- 获得类名为:Car对应数据库中表的数据集合,该查询语句用于多表关联分页查询使用 -->
    <select id="selectCarOfPaging" parameterType="common.Assist"  resultMap="result_CarOfPaging_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <include refid="car_Column" /> 
        from car
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT carId as primary_key FROM car
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=car.carId
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Car对象,以参数Car对象中不为空的属性作为条件进行查询-->
    <select id="selectCarByObj" parameterType="com.pojo.Car" resultMap="result_Car_Map">
        select 
            <include refid="car_Column" /> 
            ,<include refid="carseries_Column" /> 
        from car
        left join carseries on carseries.seriesId=car.seriesId
        <where>
            <if test="seriesId != null "> and car.seriesId = #{seriesId}</if>
            <if test="carTime != null "> and car.carTime = #{carTime}</if>
            <if test="carName != null "> and car.carName = #{carName}</if>
            <if test="carPrice != null "> and car.carPrice = #{carPrice}</if>
            <if test="carId != null "> and car.carId = #{carId}</if>
        </where>
    </select> 

    <!-- 通过Car的id获得对应数据库中表的数据对象-->
    <select id="selectCarById" parameterType="java.lang.Integer" resultMap="result_Car_Map">
        select 
            <include refid="car_Column" /> 
            ,<include refid="carseries_Column" /> 
        from car
        left join carseries on carseries.seriesId=car.seriesId
        where car.carId = #{id}
    </select> 

    <!-- 将Car插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertCar" parameterType="com.pojo.Car">
        insert into car(carId,carPrice,carName,carTime,seriesId) 
        values(#{carId},#{carPrice},#{carName},#{carTime},#{seriesId})
    </insert>

    <!-- 将Car中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyCar" parameterType="com.pojo.Car">
        insert into car
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="carId != null">carId,</if>
            <if test="carPrice != null">carPrice,</if>
            <if test="carName != null">carName,</if>
            <if test="carTime != null">carTime,</if>
            <if test="seriesId != null">seriesId,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="carId != null"> #{carId},</if>
            <if test="carPrice != null"> #{carPrice},</if>
            <if test="carName != null"> #{carName},</if>
            <if test="carTime != null"> #{carTime},</if>
            <if test="seriesId != null"> #{seriesId},</if>
        </trim>
    </insert>

    <!-- 将Car批量插入到对应数据库的表中-->
    <insert id="insertCarByBatch" parameterType="ArrayList">
        insert into car(carId,carPrice,carName,carTime,seriesId) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.carId},#{item.carPrice},#{item.carName},#{item.carTime},#{item.seriesId})
        </foreach>
    </insert>

    <!-- 通过Car的id将数据库表中对应的数据删除-->
    <delete id="deleteCarById" parameterType="java.lang.Integer">
        delete from car
        where carId = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Car对应的数据库表的数据删除-->
    <delete id="deleteCar" parameterType="common.Assist">
        delete from car
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Car的id将Car的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateCarById" parameterType="com.pojo.Car">
        update car set
            carPrice=#{carPrice}
            ,carName=#{carName}
            ,carTime=#{carTime}
            ,seriesId=#{seriesId}
        where carId=#{carId}
    </update>

    <!-- 通过Car的id将Car中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyCarById" parameterType="com.pojo.Car">
        update car
        <set>
            <if test="carPrice != null">
                carPrice=#{carPrice},
            </if>
            <if test="carName != null">
                carName=#{carName},
            </if>
            <if test="carTime != null">
                carTime=#{carTime},
            </if>
            <if test="seriesId != null">
                seriesId=#{seriesId},
            </if>
        </set>
        where carId=#{carId}
    </update>

    <!-- 通过辅助工具Assist中的条件将Car中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateCar" parameterType="map">
        update car
        <set>
                carId=#{enti.carId},
                carPrice=#{enti.carPrice},
                carName=#{enti.carName},
                carTime=#{enti.carTime},
                seriesId=#{enti.seriesId},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Car中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyCar" parameterType="map">
        update car
        <set>
            <if test="enti.carId != null">
                carId=#{enti.carId},
            </if>
            <if test="enti.carPrice != null">
                carPrice=#{enti.carPrice},
            </if>
            <if test="enti.carName != null">
                carName=#{enti.carName},
            </if>
            <if test="enti.carTime != null">
                carTime=#{enti.carTime},
            </if>
            <if test="enti.seriesId != null">
                seriesId=#{enti.seriesId},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>